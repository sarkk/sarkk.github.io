<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Jedi Mind Tricks]]></title>
  <link href="http://sarkk.github.io/atom.xml" rel="self"/>
  <link href="http://sarkk.github.io/"/>
  <updated>2015-11-25T09:49:33-05:00</updated>
  <id>http://sarkk.github.io/</id>
  <author>
    <name><![CDATA[Korey Aaronson]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Easter Eggs]]></title>
    <link href="http://sarkk.github.io/blog/2015/11/25/easter-eggs/"/>
    <updated>2015-11-25T08:56:52-05:00</updated>
    <id>http://sarkk.github.io/blog/2015/11/25/easter-eggs</id>
    <content type="html"><![CDATA[<p>From Wikipedia:</p>

<p>&ldquo;In computer software, Easter eggs are secret responses that occur as a result of an undocumented set of commands.&rdquo;</p>

<p>One of the earliest examples was in the TOPS-10 operating system, first developed in 1964. The make command was used to invoke the TECO editor to create a file; so when given the argument &ldquo;accounting&rdquo;, the call would be &ldquo;make accounting&rdquo; to create a file called &ldquo;accounting&rdquo;. If given the file name argument &ldquo;love&rdquo;, so that the command was &ldquo;make love&rdquo;, it would pause and respond &ldquo;not war?&rdquo; before creating the file.</p>

<h2>Adventure</h2>

<p><img src="http://sarkk.github.io/images/112515/adventure.jpg" alt="Adventure" /></p>

<p>The actual term &ldquo;Easter Egg&rdquo; with regards to software was first used in 1979. Atari was the biggest publisher of video games in the world. It was common at the time for games to be completed programmed by a single developer, and he/she would not be credited anywhere on or in the game. Adventure, a game for the Atari 2600, went on to sell over a million copies, but its developer, Warren Robinett, was working on a salary of $22,000 a year. In a bid for recognition, Robinett inserted a hidden room in the game that contained the text &ldquo;Created by Warren Robinett&rdquo;</p>

<p><img src="http://sarkk.github.io/images/112515/warren.gif" alt="Adventure" /></p>

<p>In James Hague&rsquo;s book Halcyon Days: Interviews with Classic Computer and Video Games Programmers, Robinett explained:</p>

<blockquote><p>Each 2600 game was designed entirely by one person. But on the package it said basically &ldquo;Adventure, by Atari.&rdquo; And we were only getting salaries, no cut of the huge profits. It was a signature, like at the bottom of a painting. But to make it happen, I had to hide my signature in the code, in a really obscure place, and not tell anybody. Of course, an adventure game, with multiple rooms, is perfect for secret things, because it&rsquo;s easy to make extra rooms that are really hard to get into.</p></blockquote>

<p>When a kid eventually found the secret room and wrote to Atari, they referred to it as an &ldquo;Easter Egg&rdquo; in their response. Software companies have continued to put Easter Eggs in their products ever since. Some notable examples in early Microsoft products:</p>

<ul>
<li>Early versions of Windows and other MS products like Excel contained hidden credits for members of the production teams.</li>
<li>Microsoft Excel 95 contained a hidden Doom-like action game called The Hall of Tortured Souls.</li>
<li>Microsoft Excel 97 contained a hidden flight simulator.</li>
<li>Microsoft Access 97 had a simulation of the Magic 8-Ball fortune-telling toy.</li>
<li>Microsoft Word 97 contained a pinball game.</li>
</ul>


<p>Some more recent examples (Google is ripe with them, only a few documented here. Mozilla also has a few):</p>

<ul>
<li>On a Mac, in your terminal type &ldquo;emacs&rdquo;, then on the next screen hit Esc and X at the same time. Type in &ldquo;snake&rdquo;, &ldquo;pong&rdquo;, or &ldquo;tetris&rdquo; and see what happens! Also try &ldquo;doctor&rdquo; to boot up an old program called ELIZA that simulates a real conversation.</li>
<li>If you do a Google image search for &ldquo;Atari Breakout&rdquo;, the images will rearrange into blocks and you can play a version of the game.</li>
<li>Similarly, if you hold the left arrow key and then push up on any youtube video, a trail of connected blocks appear and you can play Snake (although this one seems like it may have been discontinued).</li>
<li>For a time, Google Maps contained several Easter eggs whereby a user asking for directions from Japan to China, from New York to Tokyo, or from Taiwan to China would be directed to either jetski, kayak, or swim across the Pacific Ocean. Also asking it for walking directions from the Shire to Mordor used to produce &ldquo;One does not simply walk into Mordor&rdquo;. Earls Court Road in London, shows a police box that allows the user to enter the TARDIS from Doctor Who.</li>
<li>Google search responds to &ldquo;Do A Barrel Roll&rdquo; in the search box by tilting the page 360째, as if a pilot were maneuvering an aircraft. This is a reference to the popular video game series Star Fox, where the phrase became famous.</li>
</ul>


<p>There are even some examples of Easter Eggs hidden in computer hardware:</p>

<ul>
<li>A 1993 AMI BIOS that on November 13, 1993, proceeded to play &ldquo;Happy Birthday&rdquo; via the PC speaker over and over again instead of booting</li>
<li>Several early Apple Macintosh models which had pictures of the development team hidden in the ROM (accessible by pressing the programmer&rsquo;s switch and jumping to a specific memory address, or other equally obscure means).</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Brainfuck]]></title>
    <link href="http://sarkk.github.io/blog/2015/11/08/brainf-star-ck/"/>
    <updated>2015-11-08T23:26:01-05:00</updated>
    <id>http://sarkk.github.io/blog/2015/11/08/brainf-star-ck</id>
    <content type="html"><![CDATA[<p>I was doing some reading on different programming languages, and I wondered to myself, what is the smallest programming language out there? After a quick search, I came accross the esoteric programming language that is Brainfuck.</p>

<p>Brainfuck was created by this guy (Urban M체ller) in 1993 (coincidentally the same year that Matz created Ruby):</p>

<p><img src="http://sarkk.github.io/images/110815/urban.jpg" alt="Urban M체ller" /></p>

<p>The language is limited to just 8 (!) commands. The compiler M체ller built was a mere 240 bytes in size, and apparently people have succeeded in building a compiler that is under 200 bytes.</p>

<table>
<thead>
<tr>
<th style="text-align:center;"><strong>Character</strong></th>
<th style="text-align:center;"><strong>Meaning</strong></th>
<th style="text-align:center;"><strong>C Equiv</strong></th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center;"> >       </td>
<td style="text-align:center;">increment the data pointer (to point to the next cell to the right).</td>
<td style="text-align:center;">++p;</td>
</tr>
<tr>
<td style="text-align:center;"> &lt;       </td>
<td style="text-align:center;">decrement the data pointer (to point to the next cell to the left).</td>
<td style="text-align:center;">&ndash;p;</td>
</tr>
<tr>
<td style="text-align:center;"> +       </td>
<td style="text-align:center;">increment (increase by one) the byte at the data pointer.</td>
<td style="text-align:center;">++*p;</td>
</tr>
<tr>
<td style="text-align:center;"> -       </td>
<td style="text-align:center;">decrement (decrease by one) the byte at the data pointer.</td>
<td style="text-align:center;">&ndash;*p;</td>
</tr>
<tr>
<td style="text-align:center;"> .       </td>
<td style="text-align:center;">output the byte at the data pointer.</td>
<td style="text-align:center;">putchar(p);</td>
</tr>
<tr>
<td style="text-align:center;"> ,       </td>
<td style="text-align:center;">accept one byte of input, storing its value in the byte at the data pointer.</td>
<td style="text-align:center;">*p=getchar();</td>
</tr>
<tr>
<td style="text-align:center;"> [       </td>
<td style="text-align:center;">if the byte at the data pointer is zero, then instead of moving the instruction pointer forward to the next command, jump it forward to the command after the matching ] command.</td>
<td style="text-align:center;">while(*p) {</td>
</tr>
<tr>
<td style="text-align:center;"> ]       </td>
<td style="text-align:center;">if the byte at the data pointer is nonzero, then instead of moving the instruction pointer forward to the next command, jump it back to the command after the matching [ command.</td>
<td style="text-align:center;">}</td>
</tr>
</tbody>
</table>


<p>.</p>

<p>Being unfamiliar with C, I didn&rsquo;t know what pointers were. Bill Karwin gives a good explanation on his blog <a href="http://karwin.blogspot.com/2012/11/c-pointers-explained-really.html">here</a>. Pointers basically allow a programmer to  access memory directly. From Wikipedia:</p>

<blockquote><p>A pointer is a programming language object, whose value refers to (or &ldquo;points to&rdquo;) another value stored elsewhere in the computer memory using its address. A pointer references a location in memory, and obtaining the value stored at that location is known as dereferencing the pointer. As an analogy, a page number in a book&rsquo;s index could be considered a pointer to the corresponding page; dereferencing such a pointer would be done by flipping to the page with the given page number.</p></blockquote>

<p>So Brainfuck uses an array of at least 30,000 byte-sized cells initialized to zero and uses a movable data pointer to reference these cells.</p>

<p>Here is what &ldquo;Hello World!&rdquo; looks like:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>++++++++++[&gt;+++++++&gt;++++++++++&gt;+++&gt;+&lt;&lt;&lt;&lt;-] &gt;++.&gt;+.+++++++..+++.&gt;++.&lt;&lt;+++++++++++++++.&gt;.+++.------.--------.&gt;+.&gt;.</span></code></pre></td></tr></table></div></figure>


<p>Here it is with some comments to get a better understanding of what is going on:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>[ This program prints "Hello World!" and a newline to the screen, its
</span><span class='line'>  length is 106 active command characters. [It is not the shortest.]
</span><span class='line'>
</span><span class='line'>  This loop is a "comment loop", a simple way of adding a comment
</span><span class='line'>  to a BF program such that you don't have to worry about any command
</span><span class='line'>  characters. Any ".", ",", "+", "-", "&lt;" and "&gt;" characters are simply
</span><span class='line'>  ignored, the "[" and "]" characters just have to be balanced. This
</span><span class='line'>  loop and the commands it contains are ignored because the current cell
</span><span class='line'>  defaults to a value of 0; the 0 value causes this loop to be skipped.
</span><span class='line'>]
</span><span class='line'>
</span><span class='line'> +++++ +++++            initialize counter (cell #0) to 10
</span><span class='line'>[                       set the next four cells to 70, 100, 30 and 10
</span><span class='line'>  &gt; +++++ ++            add  7 to cell #1
</span><span class='line'>  &gt; +++++ +++++         add 10 to cell #2
</span><span class='line'>  &gt; +++                 add  3 to cell #3
</span><span class='line'>  &gt; +                   add  1 to cell #4
</span><span class='line'>  &lt;&lt;&lt;&lt; -                decrement counter (cell #0)
</span><span class='line'>]                 
</span><span class='line'>
</span><span class='line'>The result of this is:
</span><span class='line'>Cell No :   0   1   2   3   4
</span><span class='line'>Contents:   0   70  100 30  10
</span><span class='line'>Pointer :   ^
</span><span class='line'>
</span><span class='line'>&gt; ++ .                print 'H'  (H = ASC (72))
</span><span class='line'>&gt; + .                 print 'e'  (e = ASC (101))
</span><span class='line'>+++++ ++ .            print 'l'  (l = ASC (108))
</span><span class='line'>.                     print 'l'  (l = ASC (108))
</span><span class='line'>+++ .                 print 'o'  (o = ASC (111))
</span><span class='line'>
</span><span class='line'>&gt; ++ .                print ' '   ( = ASC (32))
</span><span class='line'>
</span><span class='line'>&lt;&lt; +++++ +++++ +++++ .  print 'W' (W = ASC (87))
</span><span class='line'>&gt; .                   print 'o'   (o = ASC (111))
</span><span class='line'>+++ .                 print 'r'   (r = ASC (114))
</span><span class='line'>----- - .             print 'l'   (l = ASC (108))
</span><span class='line'>----- --- .           print 'd'   (d = ASC (100))
</span><span class='line'>&gt; + .                 print '!'   (! = ASC (33))
</span><span class='line'>&gt; .                   print '\n'  </span></code></pre></td></tr></table></div></figure>


<p>There is a great walkthrough of the code in a source I found called <a href="https://docs.google.com/document/d/1M51AYmDR1Q9UBsoTrGysvuzar2_Hx69Hz14tsQXWV6M/edit#">Brainfuck for Dummies</a> (no author given on the document):</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>The program starts at the first command and also at the first memory location, which will be called a[0]. The next memory location will be called a[1], the one after that a[2], etc. 
</span><span class='line'>As you may recall, all memory cells have the value zero at the start of the program.
</span><span class='line'>
</span><span class='line'>1. The first line sets a[0] to 10 by simply incrementing the contents of the cell ten times.
</span><span class='line'>
</span><span class='line'>2. On the 2nd line the [ character starts a loop. The loop would end immediately if the value of the current memory cell was zero. The value is ten, so the program continues.
</span><span class='line'>
</span><span class='line'>3. The loop sets the values for the four cells: 
</span><span class='line'>a[1] = 70 (close to 72, the ASCII code for the character 'H'), 
</span><span class='line'>a[2] = 100 (close to 101 or 'e'), 
</span><span class='line'>a[3] = 30 (close to 32, the code for space) and 
</span><span class='line'>a[4] = 10 (newline). 
</span><span class='line'>
</span><span class='line'>4. Each pass of the loop, the following things happen:
</span><span class='line'>First the cursor is moved one place to the right (a[1]).
</span><span class='line'>Then the value of the current cell (a[1]) is incremented by seven.
</span><span class='line'>a[2] is incremented by ten
</span><span class='line'>a[3] is incremented by three and lastly
</span><span class='line'>a[4] is incremented by one.
</span><span class='line'>
</span><span class='line'>5. The seventh line moves the cursor all the way back to the first position a[0] and then decreases the value of this cell by one. Thus the loop will be executed ten times[5]. After the loop is finished, a[0] is zero.
</span><span class='line'>
</span><span class='line'>6. &gt;++. then moves the pointer to a[1] which holds 70, adds two to it (72 is the ASCII character code of a capital H), and outputs it with the "." command.
</span><span class='line'>
</span><span class='line'>7. The next line moves the array pointer to a[2] and adds one to it, producing 101, a lower-case 'e', which is then output.
</span><span class='line'>
</span><span class='line'>8. Since 'l' is the seventh letter after 'e', to output 'll' another seven are added (+++++++) to a[2] and the result is output twice.
</span><span class='line'>
</span><span class='line'>9. 'o' is the third letter after 'l', so a[2] is incremented three more times. Then the contents of the cell is written to the screen.
</span><span class='line'>
</span><span class='line'>10. For the space and capital letters, different array cells are selected and incremented or decremented as needed.</span></code></pre></td></tr></table></div></figure>


<p>ASCII table for reference:</p>

<p><img src="http://sarkk.github.io/images/110815/ascii.png" alt="ASCII table" /></p>

<p>Brainfuck is a Turing-complete language, meaning it theoretically can solve any computational problem (with enough time and memory), although why anyone would want to use it for anything but amusement is beyond me. It seems to have been based off of a predecessor called P'&lsquo;, created by Corrado B철hm in 1964, which uses the equivalent of 6 Brainfuck characters (no input or output).</p>

<p>There are quite a few other esoteric languages out there; languages that were created without real practical purpose, usually as a joke. Malbolge, for example, was designed to be as difficult to program in as possible. Ook! is a variation of Brainfuck meant for Orangutangs where all of Brainfuck&rsquo;s 8 characters have been replaced with some combination of &ldquo;Ook!&rdquo;, &ldquo;Ook?&rdquo;, and &ldquo;Ook.&rdquo;. Here is &ldquo;Hello World!&rdquo;:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
</pre></td><td class='code'><pre><code class=''><span class='line'> Ook. Ook? Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook.
</span><span class='line'> Ook. Ook. Ook. Ook. Ook! Ook? Ook? Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook.
</span><span class='line'> Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook? Ook! Ook! Ook? Ook! Ook? Ook.
</span><span class='line'> Ook! Ook. Ook. Ook? Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook.
</span><span class='line'> Ook. Ook. Ook! Ook? Ook? Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook?
</span><span class='line'> Ook! Ook! Ook? Ook! Ook? Ook. Ook. Ook. Ook! Ook. Ook. Ook. Ook. Ook. Ook. Ook.
</span><span class='line'> Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook! Ook. Ook! Ook. Ook. Ook. Ook. Ook.
</span><span class='line'> Ook. Ook. Ook! Ook. Ook. Ook? Ook. Ook? Ook. Ook? Ook. Ook. Ook. Ook. Ook. Ook.
</span><span class='line'> Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook! Ook? Ook? Ook. Ook. Ook.
</span><span class='line'> Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook? Ook! Ook! Ook? Ook! Ook? Ook. Ook! Ook.
</span><span class='line'> Ook. Ook? Ook. Ook? Ook. Ook? Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook.
</span><span class='line'> Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook! Ook? Ook? Ook. Ook. Ook.
</span><span class='line'> Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook.
</span><span class='line'> Ook. Ook? Ook! Ook! Ook? Ook! Ook? Ook. Ook! Ook! Ook! Ook! Ook! Ook! Ook! Ook.
</span><span class='line'> Ook? Ook. Ook? Ook. Ook? Ook. Ook? Ook. Ook! Ook. Ook. Ook. Ook. Ook. Ook. Ook.
</span><span class='line'> Ook! Ook. Ook! Ook! Ook! Ook! Ook! Ook! Ook! Ook! Ook! Ook! Ook! Ook! Ook! Ook.
</span><span class='line'> Ook! Ook! Ook! Ook! Ook! Ook! Ook! Ook! Ook! Ook! Ook! Ook! Ook! Ook! Ook! Ook!
</span><span class='line'> Ook! Ook. Ook. Ook? Ook. Ook? Ook. Ook. Ook! Ook.</span></code></pre></td></tr></table></div></figure>


<p>Another one, ArnoldC, replaces all basic keywords with quotes from different Arnold Schwarzenegger movies. &ldquo;Hello World!&rdquo;, for example:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>IT'S SHOWTIME
</span><span class='line'>TALK TO THE HAND "hello world"
</span><span class='line'>YOU HAVE BEEN TERMINATED</span></code></pre></td></tr></table></div></figure>


<p>Check <a href="https://en.wikipedia.org/wiki/Esoteric_programming_language">Wikipedia</a> or <a href="http://esolangs.org/wiki/Main_Page">Esolang</a> for some other fun esoteric languages.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[New Ways to Consume Information]]></title>
    <link href="http://sarkk.github.io/blog/2015/10/21/new-ways-to-consume-information/"/>
    <updated>2015-10-21T08:10:37-04:00</updated>
    <id>http://sarkk.github.io/blog/2015/10/21/new-ways-to-consume-information</id>
    <content type="html"><![CDATA[<p>After using puts to no end, I was curious to see what interesting (and practical) ways there are out there to output and consume information in Ruby. Inspired by a project idea from Avi, I looked into Twilio, a company that &ldquo;allows software developers to programmatically make and receive phone calls and send and receive text messages using its web service APIs&rdquo;. (Wikipedia)</p>

<p>After signing up for an account and trial phone number on their website, it was easy to find documentation for their different APIs. I don&rsquo;t think they could have made the Ruby one any simpler:</p>

<p><img src="../images/102015/twilio.png" alt="alt text" /></p>

<p>I divided this into 2 methods and wrapped a class around it so that I could pass the message through.</p>

<p><img src="../images/102015/twilio-2.png" alt="alt text" /></p>

<p>I was kind of amazed to see it work right away.</p>

<p>After sending a few texts, however, I noticed I had begun incurring a charge on my Twilio account for each one.</p>

<p><img src="../images/102015/twilio3.png" alt="alt text" /></p>

<p>Paranoid that I was going to rack up a bill, forget about it, and end up with collections chasing after me for a few pennies, I reached out to Twilio support to figure out how I could pay the balance (there was no obvious way to do so on the website). While I was waiting for a response, I was pondering other possible delivery methods. What about email?</p>

<p>After some Googling, I found a quick and easy solution. Armed with a new Gmail account for testing, I took what I found and wrapped everything in a class with a send_mail method (this should probably be split up into more methods but I wanted to get it working):</p>

<p><img src="../images/102015/gmail.png" alt="alt text" /></p>

<p>Again, I was half surprised to see that it worked right away. Much to the dismay of several of our fellow students, I immediately began to spam some of them with email blasts containing various facts about sloths.</p>

<p>Shortly after implementing the mailer, Twilio&rsquo;s response came:</p>

<blockquote><p>Hello korey,</p>

<p>Thank you for reaching out! With a trial account we give you about roughly $30 of real credit to test with, but we do not expose balance in the UI until you upgrade.</p>

<p>Looks like you have about $28.00 left or so, until you would need to upgrade. We will notify you when your balance is getting low.</p>

<p>I hope that this information is helpful. Let me know if you have further questions</p>

<p>Regards,</p>

<p>Twilio Customer Support</p></blockquote>

<p>So you don&rsquo;t need to worry about getting charged on a trial account until you hit about $30.</p>

<p>Well, there you have it. Two cool ways to send information in Ruby. I recommend playing around with both of these, as they are both easy to setup and will quickly open up a lot of real-life applications to many of the things we have been learning. Have fun!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Various Scraps of Knowledge]]></title>
    <link href="http://sarkk.github.io/blog/2015/10/05/various-scraps-of-knowledge/"/>
    <updated>2015-10-05T09:26:25-04:00</updated>
    <id>http://sarkk.github.io/blog/2015/10/05/various-scraps-of-knowledge</id>
    <content type="html"><![CDATA[<p>Welcome to my first post (well, the first one with any substance). Being in the beginning stages of my learning, I don&rsquo;t really expect my early posts to add much (if anything at all) to the greater world of programming, but my hope is that at least my fellow learners here at Flatiron will be able to extract some value from here.</p>

<p>For this one, I decided to share a couple of interesting tidbits that I came accross over the past week.</p>

<h1><strong>1. The Flip Flop Operator</strong></h1>

<p>A lot of people don&rsquo;t seem to like this one due to its &ldquo;Perlness&rdquo; and apparent lack of obvious practical application, but I thought it was interesting nonetheless. By putting a range operator (..) between two conditions in a conditional statement, it will evaluate as false until the first condition evaluates as true. It will then evaluate as true until the second condition evaluates to true. Everything afterwards will then evaluate as false until the first conditional statement is true again. Take the below example:</p>

<p><img src="../images/100515/flip_flop.png" alt="alt text" /></p>

<p>While iterating through the array of animals, each animal is evaluated as false until we hit &ldquo;dog&rdquo; from the first conditional statement. Every animal after that evaluates as true until the second conditional statement, &ldquo;cat&rdquo;, is evaluated to be true, after which all animals afterwards will evaluate as false.</p>

<p>Some people seem to have found utility in this when looking for content between markers in regexes. Again, most Rubysists seem to dislike this one, but at the very least it is probably worth being familiar wtih it in case you ever see it in someone else&rsquo;s code.</p>

<h1><strong>2. Rescue Me</strong></h1>

<p>Try and execute the following code:</p>

<p>x = 1/0</p>

<p><img src="../images/100515/divide_by_zero.png" alt="alt text" /></p>

<p>As you may have guessed, you are going to get a divided by zero error. Try do this instead:</p>

<p>x = 1/0 rescue nil</p>

<p><img src="../images/100515/divide_by_zero3.png" alt="alt text" /></p>

<p>Rescue does exactly what it implies, it &ldquo;rescues&rdquo; your code from any errors and returns whatever you designate. In this example, instead of throwing an error, rescue jumps in, ignores the exception, and evaluates whatever is declared afterwards, in this case nil. A lot people highly advise against using this as any exception can and will cause the rescue operation to execute, which can make debugging issues a very painful affair (and it is not hard to see how this could cause some serious unintended consequences). Still, a neat little something to at least be aware of.</p>

<p><img src="../images/100515/divide_by_zero2.png" alt="alt text" /></p>

<h1><strong>3. To Infinity, and Beyond</strong></h1>

<p>Try entering either of the below into IRB:</p>

<p>1/0.0</p>

<p>or</p>

<p>1.0/0</p>

<p><img src="../images/100515/infinity3.png" alt="alt text" /></p>

<p>But wait, divide by 0 didn&rsquo;t work before in the above example, why is it working now? As per the IEEE Standard for Floating-Point Arithmetic (IEEE 754), it works when we perform the operation with floats instead of fixnums. This allows us to create ranges to represent unbounded values.</p>

<p>Infinity = 1/0.0</p>

<p>all_positives = 0..Infinity</p>

<p>all_negatives = -Infinity&hellip;0</p>

<p>everything = -Infinity..Infinity</p>

<p><img src="../images/100515/infinity.png" alt="alt text" /></p>

<p>You can then use methods like take, step, first to manipulate the size and sample of what you want to use from the range. You can also use it with several enumerable methods by chaining <a href="http://ruby-doc.org/core-2.0.0/Enumerator/Lazy.html" title="Enumerable::Lazy">&ldquo;Enumerable::Lazy&rdquo;</a>, which was introduced in Ruby 2.0. &ldquo;In programming language theory, lazy evaluation, or call-by-need is an evaluation strategy which delays the evaluation of an expression until its value is needed (non-strict evaluation) and which also avoids repeated evaluations.&rdquo; <a href="https://en.wikipedia.org/wiki/Lazy_evaluation">&ldquo;Lazy Evaluation - From Wikipedia&rdquo;</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[My First Post on Octopress]]></title>
    <link href="http://sarkk.github.io/blog/2015/09/28/my-first-post-on-octopress/"/>
    <updated>2015-09-28T17:48:07-04:00</updated>
    <id>http://sarkk.github.io/blog/2015/09/28/my-first-post-on-octopress</id>
    <content type="html"><![CDATA[<p>&ldquo;Hello, World.&rdquo;</p>
]]></content>
  </entry>
  
</feed>
